## Aliases ##
# Typos & Shortcuts
alias terrafrom='terraform'
alias k='kubectl'

# Naviagtion
alias cdd="cd /home/dk/workdir"
alias cdt="cd /tmp"

# Git & Git-Flow
alias git-clean='git fetch -p && for branch in `git for-each-ref --format '"'"'%(refname) %(upstream:track)'"'"' refs/heads | awk '"'"'$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'"'"'`; do git branch -D $branch; done'

git-lasttag() {
  git tag -l | sort -V | tail -n 1
}

git-flow-release() {
  git flow release start "${1}"
  git flow release finish -m "[TASK] release ${1}" -p --pushproduction --pushdevelop --pushtag --fetch --squash --nokeeplocal --nokeepremote "${1}"
  git checkout develop
}

git-flow-publish() {
  git flow release start ${1}
  git flow release publish ${1}
}

git-release-patch() {
  NEXT_VERSION="$(git-lasttag | awk -F. '{print $1 "." $2 "." $3 + 1}')"
  test ! -z "${NEXT_VERSION}" || NEXT_VERSION="0.0.1"
  git-flow-release "${NEXT_VERSION}"
}

git-release-minor() {
  NEXT_VERSION="$(git-lasttag | awk -F. '{print $1 "." $2 + 1 ".0"}')"
  git-flow-release "${NEXT_VERSION}"
}

git-release-major() {
  NEXT_VERSION="$(git-lasttag | awk -F. '{print $1 + 1 ".0.0"}')"
  git-flow-release "${NEXT_VERSION}"
}

git-publish-patch() {
  NEXT_VERSION="$(git-lasttag | awk -F. '{print $1 "." $2 "." $3 + 1}')"
  test ! -z "${NEXT_VERSION}" || NEXT_VERSION="0.0.1"
  git-flow-publish "${NEXT_VERSION}"
}

git-publish-minor() {
  NEXT_VERSION="$(git-lasttag | awk -F. '{print $1 "." $2 + 1 ".0"}')"
  git-flow-publish "${NEXT_VERSION}"
}

git-publish-major() {
  NEXT_VERSION="$(git-lasttag | awk -F. '{print $1 + 1 ".0.0"}')"
  git-flow-publish "${NEXT_VERSION}"
}

git-pull-all() {
  REMOTES="$@";
  if [ -z "${REMOTES}" ]; then
    REMOTES=$(git remote);
  fi
  REMOTES=$(echo "${REMOTES}" | xargs -n1 echo)
  CLB=$(git rev-parse --abbrev-ref HEAD);
  echo "${REMOTES}" | while read REMOTE; do
    git remote update ${REMOTE}
    git remote show ${REMOTE} -n \
    | awk '/merges with remote/{print $5" "$1}' \
    | while read RB LB; do
      ARB="refs/remotes/${REMOTE}/${RB}";
      ALB="refs/heads/${LB}";
      NBEHIND=$(( $(git rev-list --count ${ALB}..${ARB} 2>/dev/null) +0));
      NAHEAD=$(( $(git rev-list --count ${ARB}..${ALB} 2>/dev/null) +0));
      if [ "${NBEHIND}" -gt 0 ]; then
        if [ "${NAHEAD}" -gt 0 ]; then
          echo " branch ${LB} is ${NBEHIND} commit(s) behind and ${NAHEAD} commit(s) ahead of ${REMOTE}/${RB}. could not be fast-forwarded";
        elif [ "${LB}" = "${CLB}" ]; then
          echo " branch ${LB} was ${NBEHIND} commit(s) behind of ${REMOTE}/${RB}. fast-forward merge";
          git merge -q ${ARB};
        else
          echo " branch ${LB} was ${NBEHIND} commit(s) behind of ${REMOTE}/${RB}. resetting local branch to remote";
          git branch -f ${LB} -t ${ARB} >/dev/null;
        fi
      fi
    done
  done
}

git-tag-remove() {
  if [ ! -z "${1}" ]; then
    git tag -d "${1}"
    git push --delete origin "${1}"
  fi
}

# AWS cli
aws-sm-list() {
  aws secretsmanager list-secrets | jq -r '.SecretList[].Name'
}

aws-sm-get() {
  aws secretsmanager get-secret-value --secret-id "${1}" | jq -r '.SecretString'
}

aws-ecr-login() {
  aws ecr get-login-password | docker login --username AWS --password-stdin "${1}"
}

aws-eks-login() {
  aws eks --region eu-central-1 update-kubeconfig --name "${1}" --kubeconfig config
}

aws-asg-list() {
  aws autoscaling describe-auto-scaling-groups | jq -r '.AutoScalingGroups[].AutoScalingGroupName'
}

aws-asg-describe() {
  aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "${1}" | jq '.'
}

aws-asg-refresh() {
  aws autoscaling start-instance-refresh --auto-scaling-group-name "${1}" | jq '.'
  watch "aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${1} | jq '.InstanceRefreshes[0]'"
}

aws-docdb-geteps() {
  aws docdb describe-db-clusters | jq -r '.DBClusters[].Endpoint'
}
